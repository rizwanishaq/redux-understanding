{"version":3,"sources":["redux/cake/cakeReducers.js","redux/cake/cakeTypes.js","redux/iceCream/iceCreamReducers.js","redux/iceCream/iceCreamTypes.js","redux/rootReducer.js","redux/store.js","redux/cake/cakeActions.js","components/CakeContainer.js","components/HooksCakeContainer.js","components/IceCreamContainer.js","redux/iceCream/iceCreamActions.js","components/NewCakeContainer.js","components/ItemContainer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","numOfCakes","cakeReducer","state","action","type","payload","numOfIceCreams","iceCreamReducer","rootReducer","combineReducers","cake","iceCream","store","createStore","composeWithDevTools","applyMiddleware","logger","buyCake","number","connect","dispatch","props","onClick","HooksCakeContainer","useSelector","useDispatch","buyIceCream","useState","setNumber","value","onChange","e","target","ownProps","item","buyItem","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80d277d9.chunk.js","sourcesContent":["import { BUY_CAKE } from \"./cakeTypes\";\n\nconst initialState = {\n  numOfCakes: 10\n};\n\nconst cakeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case BUY_CAKE:\n      return {\n        ...state,\n        numOfCakes: state.numOfCakes - action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default cakeReducer;\n","export const BUY_CAKE = \"BUY_CAKE\";\n","import { BUY_ICECREAM } from \"./iceCreamTypes\";\n\nconst initialState = {\n  numOfIceCreams: 20\n};\n\nconst iceCreamReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case BUY_ICECREAM:\n      return {\n        ...state,\n        numOfIceCreams: state.numOfIceCreams - 1\n      };\n    default:\n      return state;\n  }\n};\n\nexport default iceCreamReducer;\n","export const BUY_ICECREAM = \"BUY_ICECREAM\";\n","import { combineReducers } from \"redux\";\nimport cakeReducer from \"./cake/cakeReducers\";\nimport iceCreamReducer from \"./iceCream/iceCreamReducers\";\n\nconst rootReducer = combineReducers({\n  cake: cakeReducer,\n  iceCream: iceCreamReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(logger))\n);\n\nexport default store;\n","import { BUY_CAKE } from \"./cakeTypes\";\n\nexport const buyCake = (number = 1) => {\n  return {\n    type: BUY_CAKE,\n    payload: number\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { buyCake } from \"../redux/index\";\n\nfunction CakeContainer(props) {\n  return (\n    <div>\n      <h2>Number of cakes -- {props.numOfCakes}</h2>\n      <button onClick={props.buyCake}>Buy Cake</button>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    numOfCakes: state.cake.numOfCakes\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    buyCake: () => dispatch(buyCake())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CakeContainer);\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { buyCake } from \"../redux/index\";\n\nfunction HooksCakeContainer() {\n  const numOfCakes = useSelector(state => state.cake.numOfCakes);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <h2>Number of cakes -- {numOfCakes}</h2>\n      <button onClick={() => dispatch(buyCake())}>Buy cake</button>\n    </div>\n  );\n}\n\nexport default HooksCakeContainer;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { buyIceCream } from \"../redux/index\";\n\nfunction IceCreamContainer(props) {\n  return (\n    <div>\n      <h2>Number of iceCreams -- {props.numOfIceCreams}</h2>\n      <button onClick={props.buyIceCream}>Buy iceCream</button>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    numOfIceCreams: state.iceCream.numOfIceCreams\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    buyIceCream: () => dispatch(buyIceCream())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IceCreamContainer);\n","import { BUY_ICECREAM } from \"./iceCreamTypes\";\n\nexport const buyIceCream = () => {\n  return {\n    type: BUY_ICECREAM\n  };\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { buyCake } from \"../redux/index\";\n\nfunction NewCakeContainer(props) {\n  const [number, setNumber] = useState(1);\n  return (\n    <div>\n      <h2>Number of cakes -- {props.numOfCakes}</h2>\n      <input\n        type=\"text\"\n        value={number}\n        onChange={e => setNumber(e.target.value)}\n      />\n      <button onClick={() => props.buyCake(number)}>Buy {number} Cake</button>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    numOfCakes: state.cake.numOfCakes\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    buyCake: number => dispatch(buyCake(number))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewCakeContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { buyCake, buyIceCream } from \"../redux/index\";\n\nfunction ItemContainer(props) {\n  return (\n    <div>\n      <h2>Item - {props.item}</h2>\n      <button onClick={props.buyItem}>Buy Items</button>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const itemState = ownProps.cake\n    ? state.cake.numOfCakes\n    : state.iceCream.numOfIceCreams;\n\n  return {\n    item: itemState\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const dispatchFunction = ownProps.cake\n    ? () => dispatch(buyCake())\n    : () => dispatch(buyIceCream());\n\n  return { buyItem: dispatchFunction };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemContainer);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./App.css\";\nimport CakeContainer from \"./components/CakeContainer\";\nimport HooksCakeContainer from \"./components/HooksCakeContainer\";\nimport IceCreamContainer from \"./components/IceCreamContainer\";\nimport NewCakeContainer from \"./components/NewCakeContainer\";\nimport ItemContainer from \"./components/ItemContainer\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <ItemContainer cake />\n        <ItemContainer />\n        <HooksCakeContainer />\n        <CakeContainer />\n        <IceCreamContainer />\n        <NewCakeContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}